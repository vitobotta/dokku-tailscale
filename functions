#!/usr/bin/env bash
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x

source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
source "$PLUGIN_CORE_AVAILABLE_PATH/config/functions"
source "$PLUGIN_CORE_AVAILABLE_PATH/docker-options/functions"
source "$PLUGIN_CORE_AVAILABLE_PATH/ps/functions"
source "$PLUGIN_CORE_AVAILABLE_PATH/storage/functions"

tailscale_up() {
  [[ -z "$APP" ]] && dokku_log_fail "Please specify an app to run the command on"
  verify_app_name "$APP"

  local authkey="$(config_get --global TS_AUTHKEY)"
  [[ -z "$authkey" ]] && dokku_log_fail "Set the TS_AUTHKEY with dokku config:set --global"

  # Tailscale will join the app container's network, and will advertise its
  # name to the tailnet as the hostname of the app container. By default, the
  # hostname is the container ID. Set the hostname, instead, to the name of the
  # app, so that the machine in the tailnet is the same name as the app.
  #
  # Note that, if the app container is already running when tailscale:up is
  # called, then the containers need to be restarted in order to take on the
  # correct hostname. The container will still be put on the tailnet without a
  # restart, but with the wrong hostname.
  dokku_log_info1 "settings docker-option for ${APP} to --hostname=${APP}"
  phases="$(get_phases 'deploy')"
  add_passed_docker_option phases[@] "--hostname ${APP}"

  # create state dir
  local storage_directory="${DOKKU_LIB_ROOT}/data/tailscale/${APP}"
  dokku_log_info1 "Ensuring ${storage_directory} exists"
  mkdir -p "${storage_directory}"

  touch "${storage_directory}/DOKKU_ENABLED"
}

tailscale_detach() {
  [[ -z "$APP" ]] && dokku_log_fail "No app specified"
  verify_app_name "$APP"

  ( ! tailscale_is_enabled ) && return

  container_id=$("$DOCKER_BIN" ps -qaf "name=ts-$APP")
  if [[ -n "$container_id" ]] ; then
    dokku_log_info1 "removing tailscale container ts-${APP}"
    "$DOCKER_BIN" container stop "${container_id}"
    "$DOCKER_BIN" container rm "${container_id}"
  fi
}

tailscale_down() {
  [[ -z "$APP" ]] && dokku_log_fail "No app specified"
  verify_app_name "$APP"

  ( ! tailscale_is_enabled ) && return
  tailscale_detach
  rm -f "${DOKKU_LIB_ROOT}/data/tailscale/${APP}/DOKKU_ENABLED"
}

tailscale_is_enabled() {
  [[ -z "$APP" ]] && dokku_log_fail "No app specified"
  verify_app_name "$APP"
  [[ -f "${DOKKU_LIB_ROOT}/data/tailscale/${APP}/DOKKU_ENABLED" ]]
}

tailscale_attach() {
  [[ -z "$APP" ]] && dokku_log_fail "No app specified"
  verify_app_name "$APP"

  ( ! tailscale_is_enabled ) && return

  local authkey="$(config_get --global TS_AUTHKEY)"
  local extraArgs="$(config_get --global TS_EXTRA_ARGS)"
  [[ -z "$authkey" ]] && dokku_log_fail "Set the TS_AUTHKEY with dokku config:set --global"

  local storage_directory="${DOKKU_LIB_ROOT}/data/tailscale/${APP}"

  dokku_log_info1 "starting tailscale container ts-${APP}"
  "$DOCKER_BIN" container run \
    "--label=com.dokku.app-name=${APP}" \
    $DOKKU_GLOBAL_RUN_ARGS \
    --name "ts-${APP}" \
    --env TS_AUTHKEY="${authkey}" \
    --env TS_EXTRA_ARGS="${extraArgs}" \
    --env TS_STATE_DIR=/var/lib/tailscale \
    --volume "${storage_directory}":/var/lib/tailscale \
    --volume /dev/net/tun:/dev/net/tun \
    --cap-add=NET_ADMIN \
    --cap-add=SYS_MODULE \
    --restart unless-stopped \
    --network "container:${APP}.web.1" \
    --detach \
    tailscale/tailscale:latest
}

tailscale_serve_start() {
  [[ -z "$APP" ]] && dokku_log_fail "Please specify an app to run the command on"
  verify_app_name "$APP"

  ( ! tailscale_is_enabled ) && dokku_log_fail "tailscale is not enabled for $APP"

  "$DOCKER_BIN" exec "ts-${APP}" tailscale serve --bg "$PORT"
  dokku_log_info1 "started serving traffic for ${APP} :${PORT} -> :443"
}

tailscale_serve_stop() {
  [[ -z "$APP" ]] && dokku_log_fail "Please specify an app to run the command on"
  verify_app_name "$APP"

  ( ! tailscale_is_enabled ) && dokku_log_fail "tailscale is not enabled for $APP"

  "$DOCKER_BIN" exec "ts-${APP}" tailscale serve --https=443 off
  dokku_log_info1 "stopped serving traffic for ${APP} on :443"
}

tailscale_is_running_for_app() {
  # If there's a tailscale container running for this app, return the name of
  # the tailscale container.
  #
  # Callers can use the output by checking if it's empty. An empty output means
  # that the container is not found.
  [[ -z "$APP" ]] && dokku_log_fail "Please specify an app to run the command on"
  verify_app_name "$APP"

  "$DOCKER_BIN" ps --filter "name=ts-${APP}" --format "{{.Names}}"
}

tailscale_serve_url() {
  [[ -z "$APP" ]] && dokku_log_fail "Please specify an app to run the command on"
  verify_app_name "$APP"

  ( ! tailscale_is_enabled ) && return

  output=$("$DOCKER_BIN" exec "ts-${APP}" tailscale serve status)
  if [[ "$(echo $output | tr -d '[:space:]')" != "Noserveconfig" ]]; then
    echo $output | head -n 1 | cut -d ' ' -f 1 | tr -d '[:space:]'
  fi
}
